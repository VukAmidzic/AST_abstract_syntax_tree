%{
    #include "ast.hpp"
    #include <iostream>
    #include <cstdlib>
    #include <string>
    #include <cstring>
    #include <map>
    #include <vector>
    #include <utility>
    #include <algorithm>
    
    #define YYDEBUG 1
    #define YYERROR_VERBOSE 1
    
    #define check_error(cond, msg) {\
        if (!(cond)) {\
            std::cerr << msg << std::endl;\
            exit(EXIT_FAILURE);\
        }\
    }\
    
    extern FILE *yyin;
    
    extern int yylex();
    extern int line_index;
    void yyerror(std::string s) {
        std::cerr << "Error in file test.fkc, line " << line_index << ":\n";
        std::cerr << s << std::endl;
    }
    
    ASTNode* prog = nullptr;
    static std::map<std::string, std::pair<int, int>> mp;
    int var_counter = 4;
    int loop_counter = 0;
    int main_counter = 0;
    int cond_counter = 0;
    int if_counter = 0;
%}

%union {
    std::string* id;
    int number;
    ASTNode* node;
    std::vector<std::pair<ASTNode*, ASTNode*>>* els;
}

%token<number> NUM
%token<id> ID

%type<node> expr E T F Q S P N
%type<node> program stmts stmt print assign if_else while_stmt
%type<els> else_stmt

%left PLUS MINUS MUL DIV
%left SHR SHL 
%right NOT UMINUS

%token LP RP LCP RCP
%token GREAT LESS EQ NEQ GEQ LEQ 
%token AND OR NOT 
%token SEMIC ASSIGN PRINT 
%token IF ELSE WHILE

%start program
%%
program : stmts {
            $$ = new MainNode($1);
            prog = $$;
        }
        | {}
;

stmts   : stmt stmts {
            auto* assign_node = dynamic_cast<AssignNode*>($1);
            auto* print_node = dynamic_cast<PrintNode*>($1);
            auto* if_else_node = dynamic_cast<IfElseNode*>($1);
            auto* while_node = dynamic_cast<WhileNode*>($1);

            if (assign_node) {
                assign_node->next = $2;
                $$ = assign_node;
            }
            else if (print_node) {
                print_node->next = $2;
                $$ = print_node;
            }
            else if (if_else_node) {
                if_else_node->next = $2;
                $$ = if_else_node;
            }
            else if (while_node) {
                while_node->next = $2;
                $$ = while_node;
            }
        } 
        | stmt { $$ = $1; }
;

stmt    : assign SEMIC { $$ = $1; }
        | print SEMIC { $$ = $1; }
        | if_else SEMIC { $$ = $1; }
        | while_stmt SEMIC { $$ = $1; }
;

while_stmt  : WHILE LP expr RP LCP stmts RCP {
                $$ = new WhileNode($3, $6, nullptr);
            }
;

if_else : IF LP expr RP LCP stmts RCP {
            std::vector<std::pair<ASTNode*, ASTNode*>> _conds;
            _conds.push_back({$3, $6});
            $$ = new IfElseNode(_conds, nullptr);
        }
        | IF LP expr RP LCP stmts RCP else_stmt {
            $$ = new IfElseNode(*$8, nullptr);
            
            auto* if_else_node = dynamic_cast<IfElseNode*>($$);
            
            if (if_else_node) {
                if_else_node->conds.push_back({$3, $6});
                $$ = if_else_node;
            }
            else {
                yyerror("Error during if-else...");
                exit(EXIT_FAILURE);
            }
        }
;

else_stmt   : ELSE IF LP expr RP LCP stmts RCP else_stmt {
                $$ = $9;
                $$->push_back({$4, $7});
            }
            | ELSE LCP stmts RCP {
                $$ = new std::vector<std::pair<ASTNode*, ASTNode*>>();
                $$->push_back({nullptr, $3});
            }
;


assign  : ID ASSIGN expr {
            $$ = new AssignNode(*$1, $3, nullptr);
            delete $1;
        }
;

print   : PRINT LP expr RP {
            $$ = new PrintNode($3, nullptr);
        }
;

expr    : E { $$ = $1; }
        | {}
;

E   : E AND T { $$ = new BinaryNode(_AND_, $1, $3); }
    | E OR T { $$ = new BinaryNode(_OR_, $1, $3); }
    | NOT T { $$ = new BinaryNode(_NOT_, nullptr, $2); }
    | T { $$ = $1; }
;

T   : T LESS F { $$ = new BinaryNode(_LESS_, $1, $3); }
    | T GREAT F { $$ = new BinaryNode(_GREAT_, $1, $3); }
    | T EQ F { $$ = new BinaryNode(_EQ_, $1, $3); }
    | T NEQ F { $$ = new BinaryNode(_NEQ_, $1, $3); }
    | T LEQ F { $$ = new BinaryNode(_LEQ_, $1, $3); }
    | T GEQ F { $$ = new BinaryNode(_GEQ_, $1, $3); }
    | F { $$ = $1; }
;

F   : F SHR Q { $$ = new BinaryNode(_SHR_, $1, $3); }
    | F SHL Q { $$ = new BinaryNode(_SHL_, $1, $3); }
    | Q { $$ = $1; }
;

Q   : Q PLUS S { $$ = new BinaryNode(_ADD_, $1, $3); }
    | Q MINUS S { $$ = new BinaryNode(_SUB_, $1, $3); }
    | S { $$ = $1; }
;

S   : S MUL P { $$ = new BinaryNode(_MUL_, $1, $3); }
    | S DIV P { $$ = new BinaryNode(_DIV_, $1, $3); }
    | P { $$ = $1; }
;

P   : MINUS N %prec UMINUS { $$ = new BinaryNode(_NEG_, nullptr, $2); }
    | N { $$ = $1; }
;

N   : LP E RP { $$ = $2; }
    | NUM { $$ = new NumNode($1); }
    | ID {
        $$ = new VarNode(*$1);
        delete $1;
    }
;
%%

int main(int argc, char** argv) {
    check_error(argc == 2, "Incorrect number of program arguments...");
    
    yyin = fopen(argv[1], "r");
    check_error(yyin != NULL, "Could not open given input file...");
    yydebug = 0;
    
    check_error(yyparse() != 1, "Error during compilation...");
    
    traverse_tree(prog, mp, &var_counter);
    print_asm(prog, mp, &loop_counter, &main_counter, &cond_counter, &if_counter);
    
    
    exit(EXIT_SUCCESS);
}
